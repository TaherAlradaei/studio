rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Admin check helper
    function isAdmin(userId) {
      return (
        exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true
      ) || userId == "vQF7GtgIRNeq66ktYosLQtk9W9w2" || userId == "WG8c2fN7Z9cEoHj8nebLEktLM332";
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow write: if request.auth.uid == userId && !('isAdmin' in request.resource.data);
      allow write: if isAdmin(request.auth.uid);
    }

    // Bookings collection
    match /bookings/{bookingId} {
      // ✅ Allow all authenticated users to read any booking (e.g., to check availability)
      allow read: if request.auth.uid != null;

      // ✅ Allow all authenticated users to create bookings
      allow create: if request.auth.uid != null;
      
      // ✅ Allow users to update their own bookings, and admins to update any
      allow update: if request.auth.uid == resource.data.userId || isAdmin(request.auth.uid);

      // ✅ Users can delete their own bookings, admins can delete any
      allow delete: if request.auth.uid == resource.data.userId || isAdmin(request.auth.uid);
    }

    // Academy Registrations
    match /academyRegistrations/{registrationId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin(request.auth.uid);
      allow create: if request.auth.uid != null;
      allow update, delete: if isAdmin(request.auth.uid);
    }

    // Find A Team Registrations
    match /findATeamRegistrations/{registrationId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid != null;
      allow delete: if request.auth.uid == resource.data.userId || isAdmin(request.auth.uid);
    }

    // Settings (public read, admin write)
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
  }
}
